{
  "name": "memory-cache",
  "description": "A simple in-memory cache. put(), get() and del()",
  "author": {
    "name": "Paul Tarjan",
    "email": "npm@paulisageek.com"
  },
  "contributors": [
    {
      "name": "Ramon Snir",
      "email": "ramon@dynamicyield.com"
    }
  ],
  "url": "https://github.com/ramonsnir/node-cache",
  "keywords": [
    "cache",
    "ram",
    "simple",
    "storage"
  ],
  "main": "./index.js",
  "version": "0.1.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/ptarjan/node-cache.git"
  },
  "scripts": {
    "test": "node test.js"
  },
  "license": "BSD",
  "readme": "# node-cache\n\nA simple in-memory cache for node.js\n\n## Installation\n\n    npm install memory-cache\n\n## Usage\n\n```javascript\nvar cache = require('memory-cache');\n\n// now just use the cache\n\ncache.put('foo', 'bar');\nconsole.log(cache.get('foo'))\n\n// that wasn't too interesting, here's the good part\n\ncache.put('houdini', 'disapear', 100) // Time in ms\nconsole.log('Houdini will now ' + cache.get('houdini'));\n\nsetTimeout(function() {\n  console.log('Houdini is ' + cache.get('houdini'));\n}, 200);\n```\n\nwhich should print\n\n    bar\n    Houdini will now disapear\n    Houdini is null\n\n## API\n\n### put = function(key, value, time)\n\n* Simply stores a value. \n* If time isn't passed in, it is stored forever.\n* Will actually remove the value in the specified time (via `setTimeout`)\n\n### get = function(key)\n\n* Retreives a value for a given key\n\n### del = function(key)\n\n* Deletes a key, return a bool specify whether or not a key was deleted.\n\n### clear = function()\n\n* Deletes all keys\n\n### size = function()\n\n* Returns the current number of entries in the cache\n\n### memsize = function()\n\n* Returns the number of entries taking up space in the cache\n* Will usually `== size()` unless a `setTimeout` removal went wrong\n\n### debug = function(bool)\n\n* Turns on or off debugging\n\n### hits = function()\n\n* Returns the number of cache hits\n\n### misses = function()\n\n* Returns the number of cache misses.\n\n### keys = function()\n\n* Returns all the cache keys\n\n\n## Note on Patches/Pull Requests\n \n* Fork the project.\n* Make your feature addition or bug fix.\n* Send me a pull request.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ptarjan/node-cache/issues"
  },
  "_id": "memory-cache@0.1.0",
  "dist": {
    "shasum": "3d7b39bf74a263ca76fe1104a6e90549fd2a3566"
  },
  "_from": "memory-cache@0.1.0",
  "_resolved": "https://registry.npmjs.org/memory-cache/-/memory-cache-0.1.0.tgz"
}
